name: Engine VD Scanner Efficacy

# Controls when the action will run.
on:
  # Triggers the workflow on pull request but only changes in the src/engine/ directory.
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]
    paths:
      - "src/engine/**"
      - ".github/workflows/engine_vdscanner_efficacy.yml"

  workflow_dispatch:
    inputs:
      build_preset:
        type: choice
        description: "Choose the CMake build preset"
        required: false
        default: "release"
        options:
          - debug
          - release
          - relwithdebinfo
          - minsize

# Ensures only one instance of this workflow is running per PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  BUILD_PRESET: ${{ github.event.inputs.build_preset || 'release' }}
  ENGINE_DIR: ${{github.workspace}}/src/engine
  DATABASE_PATH: /var/lib/wazuh-server/

jobs:
  build:
    name: Engine VD Efficacy Test

    # Runs only if the PR status is different to Draft
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
          # Identifiers of the generated content. The generated files will be named vd_1.0.0_vd_<content_version>.tar.xz
          # From 4.10.0 onwards we use 4.10.0 content
          content_version: ["4.10.0"]

    steps:
      - name: Install dependencies (lzip)
        run: sudo apt-get install lzip

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Disabled due to not being implemented in the current workflow
      # - name: Cache CMake and ccache
      #   uses: hendrikmuhs/ccache-action@v1.2
      #   with:
      #     key: ${{ github.workflow }}-${{ runner.os }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Setup VCPKG
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: "${{env.ENGINE_DIR}}/vcpkg"
          vcpkgGitCommitId: "a42af01b72c28a8e1d7b48107b33e4f286a55ef6"
          vcpkgJsonGlob: "${{env.ENGINE_DIR}}/vcpkg.json"

      - name: Configure CMake
        run: cmake --preset=${{env.BUILD_PRESET}} --no-warn-unused-cli -S ${{env.ENGINE_DIR}}

      - name: Build
        run: cmake --build ${{env.ENGINE_DIR}}/build --target vdscanner_testtool -j$(nproc)

      - name: Download feed
        run: |
          cd src
          vd_filename="vd_1.0.0_vd_${{ matrix.content_version }}.tar.xz"

          curl -LO https://packages.wazuh.com/deps/vulnerability_model_database/${vd_filename}
          tar -xf ${vd_filename}

          mkdir -p ${{ env.DATABASE_PATH }}
          mv queue/* ${{ env.DATABASE_PATH }}

          rm -f ${vd_filename}

      - name: Install dependencies
        run: |
          pip install -r src/engine/source/vdscanner/qa/requirements.txt

      - name: Run tests
        env:
          REPORT_OUTPUT: report.md
        run: |
          echo "REPORT_FILE=${REPORT_OUTPUT}" >> "$GITHUB_ENV"
          cd src
          python -m pytest -rA --html=report.html --self-contained-html --md-report --md-report-verbose=1 --md-report-zeros empty --md-report-color never --md-report-output "$REPORT_OUTPUT" -vv engine/source/vdscanner/qa/ --log-cli-level=DEBUG
          rm -rf tmp

      # Upload markdown test summary
      - name: Output reports to the job summary
        if: always()
        shell: bash
        run: |
          cd src
          cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY

      # Upload HTML report
      - name: Upload HTML report
        if: always()
        env:
          REPORT_FILENAME: report.html
        uses: actions/upload-artifact@v4
        with:
          name: ${REPORT_FILENAME}
          path: ${{ github.workspace }}/src/${REPORT_FILENAME}
