[
    {
        "category": "Packages",
        "condition": "Package less than 17.3.1",
        "description": "Due to the formatting logic of the \"console.table()\" function it was not safe to allow user controlled input to be passed to the \"properties\" parameter while simultaneously passing a plain object with at least one property as the first parameter, which could be \"__proto__\". The prototype pollution has very limited control, in that it only allows an empty string to be assigned to numerical keys of the object prototype.Node.js >= 12.22.9, >= 14.18.3, >= 16.13.2, and >= 17.3.1 use a null protoype for the object these properties are being assigned to.",
        "id": "CVE-2022-21824",
        "item_id": "f97fcd7d34fa7b705241093e8ba47c4458017285",
        "score": {
            "base": 6.4,
            "version": "2.0"
        },
        "severity": "Medium"
    },
    {
        "category": "Packages",
        "condition": "Package less than 17.3.1",
        "description": "Node.js < 12.22.9, < 14.18.3, < 16.13.2, and < 17.3.1 did not handle multi-value Relative Distinguished Names correctly. Attackers could craft certificate subjects containing a single-value Relative Distinguished Name that would be interpreted as a multi-value Relative Distinguished Name, for example, in order to inject a Common Name that would allow bypassing the certificate subject verification.Affected versions of Node.js that do not accept multi-value Relative Distinguished Names and are thus not vulnerable to such attacks themselves. However, third-party code that uses node's ambiguous presentation of certificate subjects may be vulnerable.",
        "id": "CVE-2021-44533",
        "item_id": "f97fcd7d34fa7b705241093e8ba47c4458017285",
        "score": {
            "base": 5.0,
            "version": "2.0"
        },
        "severity": "Medium"
    },
    {
        "category": "Packages",
        "condition": "Package less than 17.3.1",
        "description": "Node.js < 12.22.9, < 14.18.3, < 16.13.2, and < 17.3.1 converts SANs (Subject Alternative Names) to a string format. It uses this string to check peer certificates against hostnames when validating connections. The string format was subject to an injection vulnerability when name constraints were used within a certificate chain, allowing the bypass of these name constraints.Versions of Node.js with the fix for this escape SANs containing the problematic characters in order to prevent the injection. This behavior can be reverted through the --security-revert command-line option.",
        "id": "CVE-2021-44532",
        "item_id": "f97fcd7d34fa7b705241093e8ba47c4458017285",
        "score": {
            "base": 5.0,
            "version": "2.0"
        },
        "severity": "Medium"
    },
    {
        "category": "Packages",
        "condition": "Package less than 17.3.1",
        "description": "Accepting arbitrary Subject Alternative Name (SAN) types, unless a PKI is specifically defined to use a particular SAN type, can result in bypassing name-constrained intermediates. Node.js < 12.22.9, < 14.18.3, < 16.13.2, and < 17.3.1 was accepting URI SAN types, which PKIs are often not defined to use. Additionally, when a protocol allows URI SANs, Node.js did not match the URI correctly.Versions of Node.js with the fix for this disable the URI SAN type when checking a certificate against a hostname. This behavior can be reverted through the --security-revert command-line option.",
        "id": "CVE-2021-44531",
        "item_id": "f97fcd7d34fa7b705241093e8ba47c4458017285",
        "score": {
            "base": 5.8,
            "version": "2.0"
        },
        "severity": "Medium"
    },
    {
        "category": "Packages",
        "condition": "Package less than 17.3.0",
        "description": "Internally libssl in OpenSSL calls X509_verify_cert() on the client side to verify a certificate supplied by a server. That function may return a negative return value to indicate an internal error (for example out of memory). Such a negative return value is mishandled by OpenSSL and will cause an IO function (such as SSL_connect() or SSL_do_handshake()) to not indicate success and a subsequent call to SSL_get_error() to return the value SSL_ERROR_WANT_RETRY_VERIFY. This return value is only supposed to be returned by OpenSSL if the application has previously called SSL_CTX_set_cert_verify_callback(). Since most applications do not do this the SSL_ERROR_WANT_RETRY_VERIFY return value from SSL_get_error() will be totally unexpected and applications may not behave correctly as a result. The exact behaviour will depend on the application but it could result in crashes, infinite loops or other similar incorrect responses. This issue is made more serious in combination with a separate bug in OpenSSL 3.0 that will cause X509_verify_cert() to indicate an internal error when processing a certificate chain. This will occur where a certificate does not include the Subject Alternative Name extension but where a Certificate Authority has enforced name constraints. This issue can occur even with valid chains. By combining the two issues an attacker could induce incorrect, application dependent behaviour. Fixed in OpenSSL 3.0.1 (Affected 3.0.0).",
        "id": "CVE-2021-4044",
        "item_id": "f97fcd7d34fa7b705241093e8ba47c4458017285",
        "score": {
            "base": 5.0,
            "version": "2.0"
        },
        "severity": "Medium"
    }
]
